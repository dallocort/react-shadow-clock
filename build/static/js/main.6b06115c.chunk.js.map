{"version":3,"sources":["components/Clock.js","components/Natpisi.js","containers/App.js","serviceWorker.js","index.js"],"names":["Clock","useEffect","hoursHtml","document","querySelector","minutesHtml","secondsHtml","dalje","sec","minPre","setInterval","hours_osaX","hours_osaY","minutes_osaX","minutes_osaY","seconds_osaX","seconds_osaY","date","Date","seconds","getSeconds","minutes","getMinutes","hours","getHours","hands","hand","angle","style","transform","Math","cos","PI","sin","boxShadow","initLocalClocks","className","Natpisi","state","text","componentDidMount","response","fecuj","a","url","fetch","ok","Error","statusText","console","log","json","setState","this","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b06115c.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport \"./clock.css\";\r\n\r\nconst Clock = () => {\r\n    function initLocalClocks(dalje, hoursHtml, minutesHtml, secondsHtml) {\r\n        let date = new Date();\r\n        let seconds = date.getSeconds();\r\n        let minutes = date.getMinutes();\r\n        let hours = date.getHours();\r\n        let hours_osaX, hours_osaY, minutes_osaX, minutes_osaY, seconds_osaX, seconds_osaY;\r\n        dalje.minPre = dalje.minPre || minutes * 6;\r\n        if (seconds === 0) {\r\n            dalje.sec += 1;\r\n            dalje.minPre = minutes * 6;\r\n        }\r\n        let hands = [{hand: \"hours\", angle: hours * 30 + minutes / 2}, {\r\n            hand: \"minutes\", angle: dalje.minPre\r\n        }, {\r\n            hand: \"seconds\", angle: dalje.sec * 360 + seconds * 6\r\n        }];\r\n        // console.log(\r\n        //   `${hours}:${minutes}:${seconds}`,\r\n        //   hands[0].angle.toFixed(2),\r\n        //   hands[1].angle.toFixed(2),\r\n        //   hands[2].angle.toFixed(2)\r\n        // );\r\n        hoursHtml.style.transform = `rotateZ(${hands[0].angle}deg)`;\r\n        minutesHtml.style.transform = `rotateZ(${hands[1].angle}deg)`;\r\n        secondsHtml.style.transform = `rotateZ(${hands[2].angle}deg)`;\r\n        hours_osaX = 6 * Math.cos((hands[0].angle / 180) * Math.PI);\r\n        hours_osaY = -3 * Math.sin((hands[0].angle / 180) * Math.PI);\r\n        minutes_osaX = 6 * Math.cos((hands[1].angle / 180) * Math.PI);\r\n        minutes_osaY = -3 * Math.sin((hands[1].angle / 180) * Math.PI);\r\n        seconds_osaX = 7 * Math.cos((hands[2].angle / 180) * Math.PI);\r\n        seconds_osaY = -6 * Math.sin((hands[2].angle / 180) * Math.PI);\r\n        hoursHtml.style.boxShadow = `${hours_osaX}px ${hours_osaY}px 2px 0px rgba(0,0,0,0.3)`;\r\n        minutesHtml.style.boxShadow = `${minutes_osaX}px ${minutes_osaY}px 2px 0px rgba(0,0,0,0.3)`;\r\n        secondsHtml.style.boxShadow = `${seconds_osaX}px ${seconds_osaY}px 2px 0px rgba(0,0,0,0.4)`;\r\n    }\r\n\r\n    useEffect(() => {\r\n        let hoursHtml = document.querySelector(\".hours\");\r\n        let minutesHtml = document.querySelector(\".minutes\");\r\n        let secondsHtml = document.querySelector(\".seconds\");\r\n        let dalje = {sec: 0, minPre: null};\r\n        setInterval(() => {\r\n            initLocalClocks(dalje, hoursHtml, minutesHtml, secondsHtml);\r\n        }, 1000);\r\n    }, []);\r\n    return (<section className=\"clock-container\">\r\n        <article className=\"clock simple\">\r\n            <div className=\"hours-container\">\r\n                <div className=\"hours\"/>\r\n            </div>\r\n            <div className=\"minutes-container\">\r\n                <div className=\"minutes\"/>\r\n            </div>\r\n            <div className=\"seconds-container\">\r\n                <div className=\"seconds\"/>\r\n            </div>\r\n        </article>\r\n    </section>);\r\n};\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\nimport \"../components/natpisi.css\";\r\n\r\nclass Natpisi extends Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\r\n    let response;\r\n\r\n    const fecuj = async () => {\r\n      const url = `${proxy}https://cat-fact.herokuapp.com/facts/random?animal_type=cat&amount=1`;\r\n      try {\r\n        response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      if (response && response.ok) {\r\n        this.setState({ text: (await response.json()).text });\r\n      }\r\n    };\r\n    fecuj();\r\n\r\n    setInterval(() => {\r\n      fecuj();\r\n    }, 15000);\r\n  };\r\n\r\n  render() {\r\n    //this.state.text;\r\n    return (\r\n      <aside>\r\n        <p>Cats fact:</p>\r\n        <p>{this.state.text}</p>\r\n      </aside>\r\n    );\r\n  }\r\n}\r\nexport default Natpisi;\r\n","import React, {Component} from \"react\";\nimport Clock from \"../components/Clock\";\nimport Natpisi from \"../components/Natpisi\";\nimport \"../containers/App.css\";\n\nclass App extends Component {\n    state = {};\n\n    render() {\n        return (<React.Fragment>\n                <Clock/>\n                <Natpisi/>\n            </React.Fragment>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<React.StrictMode>\n    <App/>\n</React.StrictMode>, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}